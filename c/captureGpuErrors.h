#ifndef CAPTURE_GPU_ERRORS
#define CAPTURE_GPU_ERRORS

#include <cuda_runtime.h>
#include "exceptions.h"

/*
 * Capture and throw any GPU error state generated by the kernel.
 *
 *      gpuErrorFlag - this is the GPU memory object.  We need to
 *                     copy this to the hostErrorFlag for evaluation.
 *
 *      If CUDA has an error state, throw CudaException(err) but if
 *      hostErrorFlag has any other error, throw the appropriate
 *      exception.
 */
void captureGpuErrors(int *gpuErrorFlag){
    const int divByZero = -1;
    cudaError_t err = cudaGetLastError(); //capture last error now before we mess it up accidentally.

    std::cout << "captureGpuErrors() start" << std::endl;

    if(*gpuErrorFlag == divByZero) {
        std::cout << "captureGpuErrors detected divByZero" << std::endl;
        throw DivisionByZeroException();
    }
    std::cout << "captureGpuErrors detected no errors from gpuErrorFlag" << std::endl;

    if (*gpuErrorFlag != 0) {
        std::cout << "captureGpuErrors detected error in gpuErrorFlag" << std::endl;
        throw ProgramError(*gpuErrorFlag);
    }

    if (err != cudaSuccess) {
        std::cout << "captureGpuErrors detected error in cudaGetLastError()" << std::endl;
        throw CudaException(err);
    }

}

#endif