#ifndef CAPTURE_GPU_ERRORS
#define CAPTURE_GPU_ERRORS

#include <cuda_runtime.h>
#include "exceptions.h"

/*
 * Capture and throw any GPU error state generated by the kernel.
 *
 *      gpuErrorFlag - this is the GPU memory object.  We need to
 *                     copy this to the hostErrorFlag for evaluation.
 *
 *      If CUDA has an error state, throw CudaException(err) but if
 *      hostErrorFlag has any other error, throw the appropriate
 *      exception.
 */
void captureGpuErrors(int *gpuErrorFlag){

    int hostErrorFlag = 0;
    const int divByZero = -1;
    cudaError_t err = cudaGetLastError();

    // Get the last CUDA error state
    err = cudaGetLastError();
    if (err != cudaSuccess) throw CudaException(err);

    if (gpuErrorFlag){
        // Copy the CUDA kernel error state (things we raised in our own programming)
        err = cudaMemcpy(&hostErrorFlag, gpuErrorFlag, sizeof(int), cudaMemcpyDeviceToHost);

        if (err != cudaSuccess) throw CudaException(err);
        if (hostErrorFlag == divByZero) throw DivisionByZeroException();
    }
}

#endif